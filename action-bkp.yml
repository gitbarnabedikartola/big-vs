name: 'Compiler Action'

inputs:
#   GH_TOKEN: 
#     required: true
  workernumbers:
    required: true
  workerN:
    required: true
  blenderversion: 
    required: true
  blenderfile:
    required: true
  scene:
    required: false
  startframe:
    required: false
  endframe:
    required: false
    
runs:
  using: "composite"
  steps:
    - name: echos
      shell:
      run: |
        echo "WorkerNumber=${{ inputs.workernumbers }}"
        echo "workerN=${{ inputs.workerN }}"
        echo "blenderversion=${{ inputs.blenderversion }}"
        echo "blenderfile=${{ inputs.blenderfile }}"
        echo "scene=${{ inputs.scene }}"
        echo "startframe=${{ inputs.startframe }}"
        echo "endframe=${{ inputs.endframe }}"
          
    - name: get blender
      shell: bash
      run: |
        echo "#Get Blender"
        version=3.3.1
        wget -cq https://mirror.clarkson.edu/blender/release/Blender3.3/blender-3.3.1-linux-x64.tar.xz
        echo "#Decompress Blender"
        tar -xf blender-${{ inputs.blenderversion }}-linux-x64.tar.xz

        
#     ##Tmate ##
#     - name: Setup TMATE Session
#       uses: mxschmitt/action-tmate@v3
        
#     - name: frames
#       shell:
#       env:
#         startframe: ${{ inputs.startframe }}
#         endframe: ${{ inputs.endframe }}
#         divisor: ${{ inputs.workernumbers }}
#       run: |
#           #Frames
#           if [ -z "$startframe" -a -z "$endframe" ]; then
#             startframe=$(blender-${{ inputs.blenderversion }}-linux-x64/blender -b ${{ inputs.blenderfile }} -S ${{ inputs.scene }} -P frames.py | grep frames | sed 's/^.*frames: //' | cut -d " " -f1 | awk -F\. '{print $1}')
#             echo "startframe python"
#             echo $startframe
#             endframe=$(blender-${{ inputs.blenderversion }}-linux-x64/blender -b ${{ inputs.blenderfile }} -S ${{ inputs.scene }} -P frames.py | grep frames | sed 's/^.*frames: //' | cut -d " " -f1 | awk -F\. '{print $3}')
#             echo "endframe pyhon"
#             echo $endframe
#           fi
#           #numero total de frames do projeto
#           totalframes=$["$endframe" - "$startframe"]
#           #numero de frames por seguimento 
#           xframe=$["$totalframes" / "${{ inputs.workernumbers }}"]
#           
#           #end frame
#           ef=$["startframe" + $["$xframe" * "${{ inputs.workerN }}"]]
#           #start frame
#           sf=$["$ef" -"$xframe" + "1"]
#           if [ "${{ inputs.workerN }}" = "1" ]; then
#             sf=$["$sf" - "1"]
#           fi
#           echo $sf
#           echo $ef
#           intervalo=$(echo "-s $sf -e $ef")
#           echo $intervalo
#           
#           
#           #gerar lista com os numeros de frames iniciais e finais
#           #for (( x="${{ inputs.workernumbers }}"; x>=1; x-- )); do  
#               #fstart=$["$xframe" * "${{ inputs.workerN }}" - "1" - "$endframe"]
#               #fend=$["$xframe" - "$fstart" - 1]
#               #if [ "${{ inputs.workerN }}" = "${{ inputs.workernumbers }}" ]; then
#                 #fstart=$["$fstart" + "1"]
#               #fi
#               #divframes="-s $fstart -e $fend"
#               #echo "divframes=$divframes"
#               #fmake="${fmake}, $divframes"
#               #fmakex=$(echo $fmake | sed 's/^, //')
#           #done
#           #echo "startframe"
#           #echo "endframe"
#           #echo "Fmake=$fmakex"

#      ## Tmate ##
#     - name: Setup TMATE Session
#       uses: mxschmitt/action-tmate@v3
    
    - name: get dependencies
      shell: bash
      run: |
        #Get Get_Dependencies
        
#         #render-animação
#         mkdir render-animacao
#         listanimacao=(
#         20min-24fps.mkv
#         10min-24fps.mkv
#         59seg-24fps.mkv
#         pause-dir.mkv
#         pause-esq.mkv
#         play-dir.mkv
#         play-esq.mkv
#         speedup-dir.mkv
#         speedup-esq.mkv
#         )
#         for i in "${listanimacao[@]}"; do
#           wget -cq https://github.com/gitbarnabedikartola/big-vs/releases/download/render-animacao/$i
#         done
# 
# 
#         gh release view render-animacao > render-animacao/renders-tag
#         pushd render-animacao
#         download=$(cat renders-tag | grep url | awk '{print $2}' | sed 's/tag/download/')
#         for i in $(cat renders-tag | grep asset | awk '{print $2}'); do wget -c ${download}/${i}; done
#         ls -lh
#         popd
# 
# 
#         
#        #capturas
#         listacapturas=(
#         Mortal-Kombat-2.mp4
#         $captura
#         )
#         for i in "${listacapturas[@]}"; do
#           wget -cq https://github.com/gitbarnabedikartola/big-vs/releases/download/capturas/$i
#         done
# 
# 
# 
        mkdir -p capturas
        gh release view capturas > capturas/renders-tag
        pushd capturas
        download=$(cat renders-tag | grep url | awk '{print $2}' | sed 's/tag/download/')
        for i in $(cat renders-tag | grep asset | awk '{print $2}'); do wget -c ${download}/${i}; done
        ls -lh
        popd
#         
#         
#         
#         
#         #upload to github release
#         #gh release create render-animacao --title render-animacao --repo gitbarnabedikartola/big-vs --notes "animação sempre usadas"
#         #for i in *.mkv ; do gh release upload render-animacao --repo gitbarnabedikartola/big-vs --clobber $i; done
#       
    - name: Render
      shell:
      env:
        startframe: ${{ inputs.startframe }}
        endframe: ${{ inputs.endframe }}
        divisor: ${{ inputs.workernumbers }}
      run: |
        #Frames
        if [ -z "$startframe" -a -z "$endframe" ]; then
          startframe=$(blender-${{ inputs.blenderversion }}-linux-x64/blender -b ${{ inputs.blenderfile }} -S ${{ inputs.scene }} -P frames.py | grep frames | sed 's/^.*frames: //' | cut -d " " -f1 | awk -F\. '{print $1}')
          echo "startframe python"
          echo $startframe
          endframe=$(blender-${{ inputs.blenderversion }}-linux-x64/blender -b ${{ inputs.blenderfile }} -S ${{ inputs.scene }} -P frames.py | grep frames | sed 's/^.*frames: //' | cut -d " " -f1 | awk -F\. '{print $3}')
          echo "endframe pyhon"
          echo $endframe
        fi
        #numero total de frames do projeto
        totalframes=$["$endframe" - "$startframe"]
        #numero de frames por seguimento 
        xframe=$["$totalframes" / "${{ inputs.workernumbers }}"]
        
        #end frame
        ef=$["startframe" + $["$xframe" * "${{ inputs.workerN }}"]]
        #start frame
        sf=$["$ef" -"$xframe" + "1"]
        if [ "${{ inputs.workerN }}" = "1" ]; then
          sf=$["$sf" - "1"]
        fi
        echo $sf
        echo $ef
        intervalo=$(echo "-s $sf -e $ef")
        echo $intervalo
      
        echo #Render
        blender-${{ inputs.blenderversion }}-linux-x64/blender -b ${{ inputs.blenderfile }} -o // -S ${{ inputs.scene }} $intervalo -a
        
        ls -lh
        
        echo ${{ github.repository }}
#         
