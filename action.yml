name: 'Compiler Action'

inputs:
  workernumber:
    required: false
  divframes: 
    required: false
  edition: 
    description: 'name of the iso profile to build'
    required: true
  branch: 
    description: 'stable (default), testing, unstable'
    required: false
    default: stable
  scope:
    description: 'full (default) or minimal image'
    required: false
    default: full
  version:
    description: 'dist_release version (upstream if not given)'
    required: false
  kernel:
    description: 'kernel version'
    required: false
    default: 515
  code-name:
    description: 'manjaro code-name (upstream if not given)'
    required: false
  release-tag:
    description: 'release tag to upload to (if set)'
    required: false
  custom-repo:
    description: 'name a custom repo to be prioritized above the default ones'
    required: false
  office-chooser:
    description: 'include calamares office installer module'
    required: false
    default: "false"
  build-mirror:
    description: 'specific build mirror to use'
    required: false
    default: https://mirror.moson.org/manjaro
  gpg-secret-key-base64:
    description: 'base64 encoded gpg secret key (without a passphrase) to sign the zip (if set)'
    required: false
  gpg-passphrase:
    description: 'phrase to decrypt the gpg secret key if given'
    required: false
  additional-trusted-gpg:
    description: 'gpg keyids that pacman should trust'
    required: false
  cdn77-host:
    description: 'cdn77 upload credentials'
    required: false
  cdn77-user:
    description: 'cdn77 upload credentials'
    required: false
  cdn77-pwd:
    description: 'cdn77 upload credentials'
    required: false
  sf-project:
    description: 'sf upload credentials'
    required: false
  sf-user:
    description: 'sf upload credentials'
    required: false
  sf-key:
    description: 'sf upload credentials'
    required: false
  osdn-project:
    description: 'osdn upload credentials'
    required: false
  osdn-user:
    description: 'osdn upload credentials'
    required: false
  osdn-key:
    description: 'osdn upload credentials'
    required: false
  mesa:
    description: 'alternative mesa'
    required: false
  extrarepo:
    description: 'extra repository to buld package'
    required: false
    
# outputs:
#   file-path:
#     description: "path of the generated iso"
#     value: ${{ steps.image-build.outputs.file-path }}

runs:
  using: "composite"
  steps:
  
    - id: Get_Blender
      shell: bash
      run: |
        #Get_Blender
        wget -cq https://mirror.clarkson.edu/blender/release/Blender3.3/blender-3.3.1-linux-x64.tar.xz
        tar -xf blender-3.3.1-linux-x64.tar.xz
    
    - name: Get_Dependencies
      shell: bash
      run: |
        #Get Get_Dependencies
        
        #render-animação
        mkdir render-animacao
        listanimacao=(
        10min.mkv
        59seg.mkv
        pause-dir.mkv
        pause-esq.mkv
        play-dir.mkv
        play-esq.mkv
        speedup-dir.mkv
        speedup-esq.mkv
        )
        pushd render-animacao
        for i in "${listanimacao[@]}"; do
          wget -cq https://github.com/gitbarnabedikartola/big-vs/releases/download/render-animacao/$i
        done
        ls -lh
        popd
        
        #capturas
        mkdir -p capturas
        listacapturas=(
        Mortal-Kombat-2.mp4
        $captura
        )
        pushd capturas
        for i in "${listacapturas[@]}"; do
          wget -cq https://github.com/gitbarnabedikartola/big-vs/releases/download/capturas/$i
        done
        ls -lh
        popd
        
        #upload to github release
        #gh release create render-animacao --title render-animacao --repo gitbarnabedikartola/big-vs --notes "animação sempre usadas"
        #for i in *.mkv ; do gh release upload render-animacao --repo gitbarnabedikartola/big-vs --clobber $i; done
      
    - name: Make
      shell:
      run: |
        #numero de divisões
        echo "${{ inputs.workernumber }}"
        #valores do frames todos jundos e separados por ,
        echo "${{ inputs.divframes }}"
        
        intervalo=$(echo "${{ inputs.divframes }}" | cut -d "," -f${{ inputs.workernumber }})
        #awk -F\, '{print $(echo ${{ inputs.workernumber }})}'
        echo "$intervalo"
        
        ls -lh
        
        blender-3.3.1-linux-x64/blender -b big-vs-ubuntu.blend -x 1 -noaudio -o // -S 03-montagem $intervalo -a
        
#     # Tmate ##
#     - name: Setup TMATE Session
#       uses: mxschmitt/action-tmate@v3
