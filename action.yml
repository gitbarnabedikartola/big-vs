name: 'Compiler Action'

inputs:
  workernumber:
    required: false
  divframes: 
    required: false
  edition: 
    description: 'name of the iso profile to build'
    required: true
  branch: 
    description: 'stable (default), testing, unstable'
    required: false
    default: stable
  scope:
    description: 'full (default) or minimal image'
    required: false
    default: full
  version:
    description: 'dist_release version (upstream if not given)'
    required: false
  kernel:
    description: 'kernel version'
    required: false
    default: 515
  code-name:
    description: 'manjaro code-name (upstream if not given)'
    required: false
  release-tag:
    description: 'release tag to upload to (if set)'
    required: false
  custom-repo:
    description: 'name a custom repo to be prioritized above the default ones'
    required: false
  office-chooser:
    description: 'include calamares office installer module'
    required: false
    default: "false"
  build-mirror:
    description: 'specific build mirror to use'
    required: false
    default: https://mirror.moson.org/manjaro
  gpg-secret-key-base64:
    description: 'base64 encoded gpg secret key (without a passphrase) to sign the zip (if set)'
    required: false
  gpg-passphrase:
    description: 'phrase to decrypt the gpg secret key if given'
    required: false
  additional-trusted-gpg:
    description: 'gpg keyids that pacman should trust'
    required: false
  cdn77-host:
    description: 'cdn77 upload credentials'
    required: false
  cdn77-user:
    description: 'cdn77 upload credentials'
    required: false
  cdn77-pwd:
    description: 'cdn77 upload credentials'
    required: false
  sf-project:
    description: 'sf upload credentials'
    required: false
  sf-user:
    description: 'sf upload credentials'
    required: false
  sf-key:
    description: 'sf upload credentials'
    required: false
  osdn-project:
    description: 'osdn upload credentials'
    required: false
  osdn-user:
    description: 'osdn upload credentials'
    required: false
  osdn-key:
    description: 'osdn upload credentials'
    required: false
  mesa:
    description: 'alternative mesa'
    required: false
  extrarepo:
    description: 'extra repository to buld package'
    required: false
    
# outputs:
#   file-path:
#     description: "path of the generated iso"
#     value: ${{ steps.image-build.outputs.file-path }}

runs:
  using: "composite"
  steps:
  
    - id: Get_Blender
      shell: bash
      run: |
        wget https://mirror.clarkson.edu/blender/release/Blender3.3/blender-3.3.1-linux-x64.tar.xz
        tar -xvf blender-3.3.1-linux-x64.tar.xz
    
    - name: Get_Dependencies
      shell: bash
      run: |
        #render-animação
        mkdir render-animacao
        listanimacao=(
        10min.mkv
        59seg.mkv
        pause-dir.mkv
        pause-esq.mkv
        play-dir.mkv
        play-esq.mkv
        speedup-dir.mkv
        speedup-esq.mkv
        )
        pushd render-animacao
        for i in "${listanimacao[@]}"; do
          wget -c $i
        done
        ls -lh
        popd
        
        #capturas
        mkdir -p capturas
        listacapturas=(
        Mortal-Kombat-2.mp4
        $captura
        )
        pushd capturas
        for i in "${listacapturas[@]}"; do
          wget -c $i
        done
        ls -lh
        popd
      
    - name: Make
      shell:
      run: |
        #numero de divisões
        echo "${{ inputs.workernumber }}"
        #valores do frames todos jundos e separados por ,
        echo "${{ inputs.divframes }}"
        
        intervalo=$(echo "${{ inputs.divframes }}" | cut -d "," -f${{ inputs.workernumber }})
        #awk -F\, '{print $(echo ${{ inputs.workernumber }})}'
        echo "$intervalo"
        
#     - id: checkout-iso-profiles
#       shell: bash
#       env:
#         REPO: ${{ inputs.iso-profiles-repo }}
#         BRANCH: ${{ inputs.iso-profiles-branch }}
#       run: sudo git clone ${BRANCH:+--branch ${BRANCH}} --depth 1 ${REPO} iso-profiles
#             
#     - id: image-build
#       shell: bash
#       env:
#         EDITION: ${{ inputs.edition }}
#         BRANCH: ${{ inputs.branch }}
#         SCOPE: ${{ inputs.scope }}
#         VERSION: ${{ inputs.version }}
#         KERNEL: ${{ inputs.kernel }}
#         CODE_NAME: ${{ inputs.code-name }}
#         OFFICE: ${{ inputs.office-chooser }}
#         BUILD_MIRROR: ${{ inputs.build-mirror }}
#         MESA: ${{ inputs.mesa }}
#         EXTRAREPO: ${{ inputs.extrarepo }}
#       run: |
#         echo "## building iso"
#         [ "$SCOPE" == "minimal" ] && unset SCOPE && unset OFFICE
#         [ "$OFFICE" == "false" ] && unset OFFICE
# 
#         #source the version info from current release info
#         source <(curl -s https://gitlab.manjaro.org/packages/core/manjaro-release/-/raw/master/lsb-release)
#         
#         sudo sed -i -e "s|dist_name=\$(get_distname)|dist_name=${DISTRIB_ID%Linux}|g" /usr/lib/manjaro-tools/util.sh
#         sudo sed -i -e 's|iso_name=$(get_osid)|iso_name=manjaro|g' /usr/lib/manjaro-tools/util.sh
#         sudo sed -i -e "s|dist_release=\$(get_release)|dist_release=${VERSION:-$DISTRIB_RELEASE}|g" /usr/lib/manjaro-tools/util.sh
#         sudo sed -i -e "s|dist_codename=\$(get_codename)|dist_codename=\"${CODE_NAME:-$DISTRIB_CODENAME}\"|g" /usr/lib/manjaro-tools/util.sh
#         sudo sed -i -e "s|build_mirror='https://manjaro.moson.eu'|build_mirror=\'${BUILD_MIRROR}\'|g" /usr/lib/manjaro-tools/util.sh
#         
#         ## BigLinux Pre Config Build ISO
#         echo "## BigLinux Pre Config Build ISO ##"
#         cd iso-profiles/biglinux-make-iso-profiles
#         sudo bash -x make-iso-profiles  ci/cd $MESA $EXTRAREPO $EDITION
#         cd ../..
#         
#         echo $KERNEL
#         echo $EDITION
#         echo $BRANCH
#         echo $SCOPE
#         echo $MESA
#         
#         sudo buildiso ${SCOPE:+-f} -p $EDITION -b $BRANCH -k linux$KERNEL ${OFFICE:+-o}
# 
#         sudo rm -Rf /var/lib/manjaro-tools/buildiso/*
#       
#         OUTPUT_ISO_PATH=$(find /var/cache/manjaro-tools/iso -type f -name "*.iso" -exec stat -c '%Y %n' {} \; | sort -nr | awk 'NR==1 {print $2}')
#         
#         if [ "$EXTRAREPO" = "testing" ];then
#           #TARGET_ISO_PATH=$(basename $OUTPUT_ISO_PATH)
#           TARGET_ISO_PATH=${EDITION}_$(LC_TIME=C date +%Y-%m-%d_%H-%M)_k$KERNEL.iso
#         else
#           #TARGET_ISO_PATH=$(basename $OUTPUT_ISO_PATH)
#           TARGET_ISO_PATH=${EDITION}_$(LC_TIME=C date +%Y-%m-%d)_k$KERNEL.iso
#         fi
#         sudo mv $OUTPUT_ISO_PATH ./$TARGET_ISO_PATH
#         echo "::set-output name=file-path::$TARGET_ISO_PATH"
# 
#         FILE_PKG=$(find /var/cache/manjaro-tools/iso -type f -name "*-pkgs.txt" -exec stat -c '%Y %n' {} \; | sort -nr | awk 'NR==1 {print $2}')
#         sudo mv $FILE_PKG ./${TARGET_ISO_PATH}.pkgs
#         
#         ls -lh
#         echo ${{ steps.image-build.outputs.file-path }}
#         
#     - id: hash
#       shell: bash
#       run: |
#         echo "## calculating hashes"
#         md5sum ${{ steps.image-build.outputs.file-path }} >${{ steps.image-build.outputs.file-path }}.md5
#         # sha1sum ${{ steps.image-build.outputs.file-path }} >${{ steps.image-build.outputs.file-path }}.sha1
#         # sha256sum ${{ steps.image-build.outputs.file-path }} >${{ steps.image-build.outputs.file-path }}.sha256
#         # sha512sum ${{ steps.image-build.outputs.file-path }} >${{ steps.image-build.outputs.file-path }}.sha512
#         
#     #- id: gpg_sign
#       #shell: bash
#       #run: |
#         ## if is not yet supported in composite https://github.com/actions/runner/blob/main/docs/adrs/0549-composite-run-steps.md#if-condition
#         #if [ -z "${{ inputs.gpg-secret-key-base64 }}" ]; then 
#           #echo "## no gpg secret given"
#           #exit 0
#         #fi
#         #echo "## gpg signing"
#         #cat <(echo -e "${{ inputs.gpg-secret-key-base64 }}" | base64 --decode) | gpg --batch --import &>/dev/null
#         #gpg --pinentry-mode loopback --passphrase "${{ inputs.gpg-passphrase }}" --detach-sign ./${{ steps.image-build.outputs.file-path }}
#         
#     - id: upload-prepare
#       shell: bash -O extglob {0}
#       run: |
#         echo "## ssh setup"
#         mkdir -p /home/runner/.ssh
#         touch /home/runner/.ssh/github_actions
#         chmod 600 /home/runner/.ssh/github_actions
#         ssh-agent -a /tmp/ssh_agent.sock > /dev/null
#         echo "::set-output name=upload-files::./${{ steps.image-build.outputs.file-path }}+(|.sha*|.pkgs|.sig|.torrent|.md5)"
#         mkdir -p ${{ inputs.edition }}/${{ inputs.version }}
#         
#     - id: Torrent
#       shell: bash -O extglob {0}
#       run: |    
#         #mktorrent -v -a udp://tracker.opentrackr.org:1337 -l 21 \
#         #-w "https://iso.biglinux.com.br/${{ inputs.edition }}/${{ inputs.version }}/${{ steps.image-build.outputs.file-path }}" \
#         #-o ${{ steps.image-build.outputs.file-path }}.torrent ${{ steps.image-build.outputs.file-path }}
#         mktorrent -v -a udp://tracker.opentrackr.org:1337 -l 21 \
#         -w "https://iso.biglinux.com.br/${{ steps.image-build.outputs.file-path }}" \
#         -w "https://osdn.net/projects/biglinux/storage/${{ steps.image-build.outputs.file-path }}" \
#         -o ${{ steps.image-build.outputs.file-path }}.torrent ${{ steps.image-build.outputs.file-path }}
#     
#     - id: upload-github-release
#       shell: bash -O extglob {0}
#       run: |
#         # if is not yet supported in composite https://github.com/actions/runner/blob/main/docs/adrs/0549-composite-run-steps.md#if-condition
#         # if [ -z "${{ inputs.release-tag }}" ]; then 
#         #   echo "## no release tag given"
#         #   exit 0
#         # fi
#         echo "## github upload"
#         release=$(echo ${{ steps.image-build.outputs.file-path }} | sed 's/_k.*//')
# 
#         echo ${{ github.token }} | gh auth login --with-token
#         gh release create ${release} --title ${release} --repo ${{ github.repository }} --notes "automated release" || echo "release already exists"
# 
#         GITHUB_LINK=https://github.com/${GITHUB_REPOSITORY}/releases/download/${release}
# 
#         if [[ -z "$(du --threshold=1950M ${{ steps.image-build.outputs.file-path }})" ]]; then
#           # iso is small enough to upload already
#           gh release upload ${release} --repo ${{ github.repository }} --clobber \
#             ${{ steps.upload-prepare.outputs.upload-files }}
#         else
#           # iso is too big - creating a split-zip
#           zip -j -s 1950m ${{ steps.image-build.outputs.file-path }}.zip ${{ steps.image-build.outputs.file-path }}
#           
#           REMOTE_FILES=$(find . -maxdepth 1 -name "*.z*" -exec basename {} \; | xargs -I{} echo "-w \"${GITHUB_LINK}/{}\"")
#           gh release upload ${release} --repo ${{ github.repository }} --clobber \
#             ./${{ steps.image-build.outputs.file-path }}+(.z*|.sha*|.pkgs|.sig|.torrent|.md5)
#         fi
#           
#     #- name: upload-sourceforge
#       #shell: bash -O extglob {0}
#       #env:
#         #SSH_AUTH_SOCK: /tmp/ssh_agent.sock
#       #run: |
#         ## if is not yet supported in composite https://github.com/actions/runner/blob/main/docs/adrs/0549-composite-run-steps.md#if-condition
#         #if [ -z "${{ inputs.sf-project }}" ] || [ -z "${{ inputs.sf-user }}" ] || [ -z "${{ inputs.sf-key }}" ]; then 
#           #echo "## not (all) credentials given for sourceforge upload"
#           #exit 0
#         #fi
#         #echo "## sourceforge upload"
#         
#         #ssh-keyscan -t rsa frs.sourceforge.net >> /home/runner/.ssh/known_hosts
#         #echo "${{ inputs.sf-key }}" >> /home/runner/.ssh/github_actions
#         #ssh-add /home/runner/.ssh/github_actions
# 
#         ### create target dir
#         #rsync -vaP --stats -e ssh ${{ inputs.edition }} \
#           #${{ inputs.sf-user }}@frs.sourceforge.net:/home/frs/project/${{ inputs.sf-project }}/
# 
#         ### upload
#         #rsync -vaP --stats -e ssh ${{ steps.upload-prepare.outputs.upload-files }} \
#           #${{ inputs.sf-user }}@frs.sourceforge.net:/home/frs/project/${{ inputs.sf-project }}/${{ inputs.edition }}/${{ inputs.version }}/
#           
#     #- name: upload-osdn
#       #shell: bash -O extglob {0}
#       #env:
#         #SSH_AUTH_SOCK: /tmp/ssh_agent.sock
#       #run: |
#         ## if is not yet supported in composite https://github.com/actions/runner/blob/main/docs/adrs/0549-composite-run-steps.md#if-condition
#         #if [ -z "${{ inputs.osdn-project }}" ] || [ -z "${{ inputs.osdn-user }}" ] || [ -z "${{ inputs.osdn-key }}" ]; then 
#           #echo "## not (all) credentials given for osdn upload"
#           #exit 0
#         #fi
#         #echo "## osdn upload"
# 
#         #ssh-keyscan -t rsa storage.osdn.net >> /home/runner/.ssh/known_hosts
#         #echo "${{ inputs.osdn-key }}" >> /home/runner/.ssh/github_actions
#         #ssh-add /home/runner/.ssh/github_actions
# 
#         ### create target dir
#         #rsync -vaP --stats -e ssh ${{ inputs.edition }} \
#           #${{ inputs.osdn-user }}@storage.osdn.net:/storage/groups/m/ma/${{ inputs.osdn-project }}/
# 
#         #OSDN_GROUP=$(echo ${{ inputs.osdn-project }} | cut -c 1)/$(echo ${{ inputs.osdn-project }} | cut -c 1-2)
# 
#         #rsync -vaP --stats -e ssh ${{ steps.upload-prepare.outputs.upload-files }} \
#           #${{ inputs.osdn-user }}@storage.osdn.net:/storage/groups/${OSDN_GROUP}/${{ inputs.osdn-project }}/${{ inputs.edition }}/${{ inputs.version }}/
# 
#     #- name: upload-cdn77
#       #shell: bash -O extglob {0}
#       #run: |
#         ## if is not yet supported in composite https://github.com/actions/runner/blob/main/docs/adrs/0549-composite-run-steps.md#if-condition
#         #if [ -z "${{ inputs.cdn77-host }}" ] || [ -z "${{ inputs.cdn77-user }}" ] || [ -z "${{ inputs.cdn77-pwd }}" ]; then 
#           #echo "## not (all) credentials given for cdn77 upload"
#           #exit 0
#         #fi
#         #echo "## cdn77 upload"
#         
#         #mktorrent -v -a udp://tracker.opentrackr.org:1337 -l 21 \
#           #-w "https://download.manjaro.org/${{ inputs.edition }}/${{ inputs.version }}/${{ steps.image-build.outputs.file-path }}" \
#           #-o ${{ steps.image-build.outputs.file-path }}.torrent ${{ steps.image-build.outputs.file-path }}
#         
#         #ssh-keyscan -t rsa ${{ inputs.cdn77-host }} >> /home/runner/.ssh/known_hosts
# 
#         ## create target dir
#         #sshpass -p "${{ inputs.cdn77-pwd }}" rsync -vaP --stats -e ssh ${{ inputs.edition }} \
#           #${{ inputs.cdn77-user }}@${{ inputs.cdn77-host }}:/www/
# 
#         ## upload
#         #sshpass -p "${{ inputs.cdn77-pwd }}" rsync -vaP \
#           #--stats -e ssh ${{ steps.upload-prepare.outputs.upload-files }} \
#           #${{ inputs.cdn77-user }}@${{ inputs.cdn77-host }}:/www/${{ inputs.edition }}/${{ inputs.version }}/
