name: build
on: 
  workflow_dispatch:
  push:
    branches: [ "main" ]
  
env:
  workernumbers: 10
  GH_TOKEN: ${{ secrets.TOKEN_UPLOAD }}
  
jobs:
  prepare-release:
    runs-on: ubuntu-20.04
    outputs:
      release_tag: ${{ steps.time.outputs.time }}
    steps:
      - id: time
        uses: nanzm/get-time-action@v1.1
        with:
          format: 'YYYY_MM_DD_HHmm'
  create-release:
    needs: prepare-release
    runs-on: ubuntu-latest
    steps:
      - name: create github release
        shell: bash
        run: |
          # echo ${{ secrets.TOKEN_UPLOAD }} | gh auth login --with-token
          gh release create renders-${{ needs.prepare-release.outputs.release_tag }} --title renders-${{ needs.prepare-release.outputs.release_tag }} --repo ${{ github.repository }} --notes "Renderizações"
          
  nmatrix:
    runs-on: ubuntu-latest
    outputs:
      nmatrix: ${{ steps.set-nmatrix.outputs.Nmatrix }}
    steps:
      - id: set-nmatrix
        run: |
          #criar matrix para workernumbers
          for (( x=$workernumbers; x>=1; x-- )); do  
              xx=$["$workernumbers" - "$x" + "1"]
              xxx="$xxx,'$xx'"
              xxxx=$(echo "$xxx" | sed 's/^,//')
          done
          echo "Nmatrix=[$xxxx]" >> $GITHUB_OUTPUT

  make:
    needs: [nmatrix, prepare-release]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        workerN: ${{fromJSON(needs.nmatrix.outputs.nmatrix)}}
    steps:
      - uses: actions/checkout@v3
      - name: Make
        uses: gitbarnabedikartola/big-vs@main
        with:
          # GH_TOKEN: ${{ secrets.TOKEN_UPLOAD }}
          workernumbers: $workernumbers
          workerN: ${{ matrix.workerN }}
          blenderversion: 3.3.1
          blenderfile: big-vs-ubuntu.blend
          #cena a ser renderizada, em branco renderiza a primeira cena
          scene: 03-montagem
          #preencher se quiser renderizar só uma parte, deixar em branco para renderizar os frames do .blend
          startframe: 18267
          endframe: 18544
        
      - name: push to git releases
        shell: bash
        run: |
          echo ${{ github.repository }}
          ls -lh
          # sleep 600
          # echo ${{ secrets.TOKEN_UPLOAD }} | gh auth login --with-token
          # gh release create renders-${{ needs.prepare-release.outputs.release_tag }} --title renders-${{ needs.prepare-release.outputs.release_tag }} --repo ${{ github.repository }} --notes "Renderizações" || echo "release already exists"
          for i in *.mkv; do
            gh release upload renders-${{ needs.prepare-release.outputs.release_tag }} --repo ${{ github.repository }} --clobber $i
          done
          
  concat:
    needs: [make, prepare-release, create-release]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Concat
      shell: bash
      run: |
        sudo apt update
        sudo apt install ffmpeg -y
        echo "LS 1"
        ls -lh
      
        mkdir concat
        gh release download renders-${{ needs.prepare-release.outputs.release_tag }} -D concat
        # gh release view renders-${{ needs.prepare-release.outputs.release_tag }} > concat/renders-tag
        cd concat
        # download=$(cat renders-tag | grep url | awk '{print $2}' | sed 's/tag/download/')
        # for i in $(cat renders-tag | grep asset | awk '{print $2}'); do wget -c ${download}/${i}; done
        
        echo "LS 2"
        ls -lh
        
        for f in ./*.mkv; do echo "file '$f'" >> mylist.txt; done
        cat mylist.txt | awk '{print $2}' | sed s/\'//g | sed 's/^..//' | sort -t'-' -k1 -n | awk '{print "file '\''./"$0"'\''" }' > mylist2.txt
        ffmpeg -f concat -safe 0 -i mylist2.txt -c copy full-video-output-${{ needs.prepare-release.outputs.release_tag }}.mkv
        
        echo "LS 3"
        ls -lh
        
        # echo ${{ secrets.TOKEN_UPLOAD }} | gh auth login --with-token
        # for i in *.mkv; do
        #   gh release upload renders-${{ needs.prepare-release.outputs.release_tag }} --repo ${{ github.repository }} --clobber $i
        # done
        gh release upload renders-${{ needs.prepare-release.outputs.release_tag }} --repo ${{ github.repository }} --clobber full-video-output-${{ needs.prepare-release.outputs.release_tag }}.mkv
        
          
      #   ##Tmate ##
      # - name: Setup TMATE Session
      #   uses: mxschmitt/action-tmate@v3    
