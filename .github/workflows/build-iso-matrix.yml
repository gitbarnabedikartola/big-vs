name: Biglinux Build ISO Matrix
on:
  workflow_dispatch:
    
  # repository_dispatch:
  #   types:
  #     - webhook
  #     - '**'

jobs:
  prepare-release:
    runs-on: ubuntu-20.04
    steps:
    #   - id: time
    #     uses: nanzm/get-time-action@v1.1
    #     with:
    #       format: 'YYYYMMDDHHmm'
    # outputs:
    #   release_tag: ${{ steps.time.outputs.time }}
      - id: frames
        shell: bash -O extglob {0}
        run: |
          #frame inicial
          startframe=0
          #frame final
          endframe=3000
          #numero de divisões do projeto
          divisor=3
          #numero total de frames do projeto
          totalframes=$["$endframe" - "$startframe"]
          #numero de frames por seguimento 
          xframe=$["$totalframes" / "$divisor"]
          #gerar lista com os numeros de frames iniciais e finais
          for (( x=1; x<="$divisor"; x++ )); do  
              fend=$["$xframe" * "$x"]
              fstart=$["$fend" - "$xframe" + "1"]
              divframes="-s $fstart -e $fend"
              xx=$["$divisor" - "$x" + "1"]
              xxx="$xxx, $xx"
              echo "$xxx" | sed 's/^, //' | sed 's/^/[/' | sed 's/$/]/'
              xxxx=$(echo "$xxx" | sed 's/^, //' | sed 's/^/[/' | sed 's/$/]/')
              echo "matrix=$xxxx" >> $GITHUB_ENV
          done
    outputs:
      release_tag: ${{ steps.frames.outputs.matrix }}
        
  build-release:
    runs-on: ubuntu-20.04
    needs: [prepare-release]
    strategy:
      matrix:
        # EDITION: [biglinux]
        # BRANCH: [stable]
        # SCOPE: [full]
        #EXTRAREPO: []
        KERNEL: [3, 2, 1]
        #KERNEL: [515]
        
    steps:
#       - id: time
#         uses: nanzm/get-time-action@v1.1
#         with:
#           format: 'YY.MM.DD'
#       
#       - name: Mesa
#         shell: bash -O extglob {0}
#         run: |
#           if [ "${{ matrix.kernel }}" -eq "510" ];then echo "MESA=amber" >> $GITHUB_ENV
#           elif [ "${{ matrix.kernel }}" -eq "60" ];then echo "MESA=mesa-git" >> $GITHUB_ENV
#           fi
#           echo ${{ env.MESA }}
#           echo "${{ env.MESA }}"
#           echo $env.MESA
#           echo "$env.MESA"
#       
      - name: Build and Upload GitHub
        uses: gitbarnabedikartola/big-vs@main
        # with:
        #   # edition: ${{ matrix.edition }}
        #   # branch: ${{ matrix.branch }}
        #   # scope: ${{ matrix.scope }}
        #   # version: ${{ steps.time.outputs.time }}
          kernel: ${{ matrix.kernel }}
        #   # mesa: ${{ env.MESA }}
        #   # extrarepo: ${{ matrix.extrarepo }}
        #   # code-name: "Sikaris"
        #   # iso-profiles-repo: 'https://github.com/biglinux/iso-profiles'
        #   # release-tag: ${{ needs.prepare-release.outputs.release_tag }}
#           
      - name: Prepare Files to Upload
        shell: bash -O extglob {0}
        run: |
          echo "${{ env.matrix }}"
#           ls -lh
#           mkdir iso
#           for i in *.iso *.torrent *.pkgs *.md5; do
#           cp $i iso/
#           done
#           
#       - name: Verify md5sum
#         shell: bash -O extglob {0}
#         run: |
#           cd iso
#           mkdir mnt
#           find -type f -iname "*.iso" -exec sudo mount -o loop {} mnt \;
#           cd mnt/manjaro/x86_64/
#           for i in *.md5; do 
#             if [ "$(md5sum -c $i | cut -d " " -f2)" != "OK" ]; then
#               echo "deu ruim no md5dum do arquivo $i"
#               exit 1
#             else
#               echo "md5sum do arquivo $i está OK"
#             fi
#           done
#           cd ../../..
#           sudo umount mnt
#           
#       # - name: Prepare and Push to CDN77
#       #   shell: bash -O extglob {0}
#       #   run: |
#       #     ssh-keyscan -t ecdsa ${{ secrets.CDN77_HOST }} >> /home/runner/.ssh/known_hosts
#       #     sshpass -p "${{ secrets.CDN77_KEY }}" rsync -Ccravp --progress iso/ ${{ secrets.CDN77_USER }}@${{ secrets.CDN77_HOST }}:${{ secrets.CDN77_ISO_DIR }}
#       
#       - name: Push to Repo Nimbus
#         shell: bash -O extglob {0}
#         run: |
#           echo "## ssh setup"
#           mkdir -p /home/runner/.ssh
#           touch /home/runner/.ssh/github_actions
#           chmod 600 /home/runner/.ssh/github_actions
#           echo "${{ secrets.PKGBUILD_KEY }}" > /home/runner/.ssh/github_actions
#           eval `ssh-agent -s`
#           ssh-add /home/runner/.ssh/github_actions
#           ssh-keyscan -t rsa -p ${{ secrets.PKGBUILD_PORT }} ${{ secrets.PKGBUILD_HOST }} >> /home/runner/.ssh/known_hosts
#           
#           #push files
#           for i in *.iso *.torrent *.pkgs *.md5; do
#           test -e $i && rsync -vaPpz -e "ssh -p ${{ secrets.PKGBUILD_PORT }}" $i ${{ secrets.PKGBUILD_USER }}@${{ secrets.PKGBUILD_HOST }}:${{ secrets.NIMBUS_DIR }}
#           done
#           
#       - name: Upload OSDN
#         shell: bash -O extglob {0}
#         #env:
#           #SSH_AUTH_SOCK: /tmp/ssh_agent.sock
#         run: |
#           mkdir -p /home/runner/.ssh
#           touch /home/runner/.ssh/id_rsa
#           chmod 600 /home/runner/.ssh/id_rsa
#           echo "${{ secrets.XIVASTUDIO_OSDN_KEY }}" > /home/runner/.ssh/id_rsa
#           #ssh-add /home/runner/.ssh/github_actions
#           ssh-keyscan -t rsa storage.osdn.net >> /home/runner/.ssh/known_hosts
#         
#           ### create target dir
#           #rsync -vaP --stats -e ssh ${{ inputs.edition }} \
#             #${{ inputs.osdn-user }}@storage.osdn.net:/storage/groups/m/ma/${{ inputs.osdn-project }}/
# 
#           #OSDN_GROUP=$(echo ${{ inputs.osdn-project }} | cut -c 1)/$(echo ${{ inputs.osdn-project }} | cut -c 1-2)
# 
#           #rsync -vaP --stats -e ssh ${{ steps.upload-prepare.outputs.upload-files }} \
#             #${{ inputs.osdn-user }}@storage.osdn.net:/storage/groups/${OSDN_GROUP}/${{ inputs.osdn-project }}/${{ inputs.edition }}/${{ inputs.version }}/
# 
#           rsync -CavzpP --progress iso/ ${{ secrets.XIVASTUDIO_OSDN_USER }}@${{ secrets.XIVASTUDIO_OSDN_HOST }}:${{ secrets.XIVASTUDIO_OSDN_DIR }}
#             
#       #- name: Push to SourceForge
#         #shell: bash -O extglob {0}
#         #run: |
#           #echo "## ssh setup"
#           #mkdir -p /home/runner/.ssh
#           #touch /home/runner/.ssh/id_ed25519
#           #chmod 600 /home/runner/.ssh/id_ed25519
#           #echo "${{ secrets.XIVASTUDIO_SOURCEFORGE_KEY }}" >> /home/runner/.ssh/id_ed25519
#           #ssh-keyscan -t ed25519 ${{ secrets.XIVASTUDIO_SOURCEFORGE_HOST }} >> /home/runner/.ssh/known_hosts
#           
#           ##push files
#           ##SourceForge XIVAStudio
#           #ssh xivastudio@shell.sourceforge.net create
#           #rsync -CavzpP --progress --rsh=ssh iso/ ${{ secrets.XIVASTUDIO_SOURCEFORGE_USER }}@${{ secrets.XIVASTUDIO_SOURCEFORGE_HOST }}:${{ secrets.XIVASTUDIO_SOURCEFORGE_ISO_DIR_BIGLINUX }}
#       
#       ## Tmate ##
#       #- name: Setup TMATE Session
#         #uses: mxschmitt/action-tmate@v3
# 
#       - name: Telegram Alert Success
#         shell: bash -O extglob {0}
#         run: |
#           curl -X POST -H 'Content-Type: application/json' -d '{"chat_id": "${{ secrets.CHAT_ID }}", "text": "ISO: ${{ github.workflow }} Criada com Sucesso.", "disable_notification": true}' ${{ secrets.MESSAGE_BOT_KEY }}
#           
#       - name: Telegram Alerta Fail
#         if: ${{ failure() || cancelled() }}
#         run: |
#           #echo ${{ github.token }} | gh auth login --with-token
#           #gh release delete ${{ needs.prepare-release.outputs.release_tag }} -y --repo ${{ github.repository }}
#           
#           curl -X POST -H 'Content-Type: application/json' -d '{"chat_id": "${{ secrets.CHAT_ID }}", "text": "Falha ao gerar ISO  ${{ github.workflow }} link https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}", "disable_notification": false, "disable_web_page_preview": true}' ${{ secrets.MESSAGE_BOT_KEY }}
